/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface PoolInterface extends utils.Interface {
  functions: {
    "_loanStartEpochs(address)": FunctionFragment;
    "_loans(address)": FunctionFragment;
    "assets()": FunctionFragment;
    "costOfCapital()": FunctionFragment;
    "exit(address,uint256)": FunctionFragment;
    "fixedCreditAmount()": FunctionFragment;
    "getNextPaymentAmount(address)": FunctionFragment;
    "getPaymentDeadlineEpoch(address)": FunctionFragment;
    "getPenalty(address)": FunctionFragment;
    "id()": FunctionFragment;
    "initialTokenPrice()": FunctionFragment;
    "initialize(address,uint256)": FunctionFragment;
    "loanDurationInEpochs()": FunctionFragment;
    "name()": FunctionFragment;
    "owed()": FunctionFragment;
    "paydownDebt(address)": FunctionFragment;
    "paymentInterval()": FunctionFragment;
    "poolToken()": FunctionFragment;
    "repaymentAmount(uint256)": FunctionFragment;
    "rewards()": FunctionFragment;
    "stake(address)": FunctionFragment;
    "staked()": FunctionFragment;
    "takeLoan(uint256)": FunctionFragment;
    "tokenPrice()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_loanStartEpochs"
      | "_loans"
      | "assets"
      | "costOfCapital"
      | "exit"
      | "fixedCreditAmount"
      | "getNextPaymentAmount"
      | "getPaymentDeadlineEpoch"
      | "getPenalty"
      | "id"
      | "initialTokenPrice"
      | "initialize"
      | "loanDurationInEpochs"
      | "name"
      | "owed"
      | "paydownDebt"
      | "paymentInterval"
      | "poolToken"
      | "repaymentAmount"
      | "rewards"
      | "stake"
      | "staked"
      | "takeLoan"
      | "tokenPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_loanStartEpochs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_loans",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "assets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "costOfCapital",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedCreditAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextPaymentAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentDeadlineEpoch",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPenalty",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "loanDurationInEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paydownDebt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentInterval",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repaymentAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "staked", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "takeLoan",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPrice",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_loanStartEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "costOfCapital",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fixedCreditAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextPaymentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentDeadlineEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPenalty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loanDurationInEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paydownDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repaymentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takeLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenPrice", data: BytesLike): Result;

  events: {};
}

export interface Pool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _loanStartEpochs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _loans(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    assets(overrides?: CallOverrides): Promise<[BigNumber]>;

    costOfCapital(overrides?: CallOverrides): Promise<[BigNumber]>;

    exit(
      exitTo: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fixedCreditAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextPaymentAmount(
      loanAgent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPaymentDeadlineEpoch(
      loanAgent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPenalty(
      loanAgent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    id(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _poolToken: PromiseOrValue<string>,
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    loanDurationInEpochs(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owed(overrides?: CallOverrides): Promise<[BigNumber]>;

    paydownDebt(
      loanAgent: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paymentInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolToken(overrides?: CallOverrides): Promise<[string]>;

    repaymentAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(
      _staker: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    staked(overrides?: CallOverrides): Promise<[BigNumber]>;

    takeLoan(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  _loanStartEpochs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _loans(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assets(overrides?: CallOverrides): Promise<BigNumber>;

  costOfCapital(overrides?: CallOverrides): Promise<BigNumber>;

  exit(
    exitTo: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fixedCreditAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getNextPaymentAmount(
    loanAgent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPaymentDeadlineEpoch(
    loanAgent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPenalty(
    loanAgent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  initialTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _poolToken: PromiseOrValue<string>,
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  loanDurationInEpochs(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owed(overrides?: CallOverrides): Promise<BigNumber>;

  paydownDebt(
    loanAgent: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paymentInterval(overrides?: CallOverrides): Promise<BigNumber>;

  poolToken(overrides?: CallOverrides): Promise<string>;

  repaymentAmount(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewards(overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    _staker: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  staked(overrides?: CallOverrides): Promise<BigNumber>;

  takeLoan(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _loanStartEpochs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _loans(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assets(overrides?: CallOverrides): Promise<BigNumber>;

    costOfCapital(overrides?: CallOverrides): Promise<BigNumber>;

    exit(
      exitTo: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixedCreditAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getNextPaymentAmount(
      loanAgent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentDeadlineEpoch(
      loanAgent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getPenalty(
      loanAgent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    initialTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _poolToken: PromiseOrValue<string>,
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    loanDurationInEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owed(overrides?: CallOverrides): Promise<BigNumber>;

    paydownDebt(
      loanAgent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paymentInterval(overrides?: CallOverrides): Promise<BigNumber>;

    poolToken(overrides?: CallOverrides): Promise<string>;

    repaymentAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    staked(overrides?: CallOverrides): Promise<BigNumber>;

    takeLoan(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    _loanStartEpochs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _loans(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assets(overrides?: CallOverrides): Promise<BigNumber>;

    costOfCapital(overrides?: CallOverrides): Promise<BigNumber>;

    exit(
      exitTo: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fixedCreditAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getNextPaymentAmount(
      loanAgent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPaymentDeadlineEpoch(
      loanAgent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPenalty(
      loanAgent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    initialTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _poolToken: PromiseOrValue<string>,
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    loanDurationInEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owed(overrides?: CallOverrides): Promise<BigNumber>;

    paydownDebt(
      loanAgent: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paymentInterval(overrides?: CallOverrides): Promise<BigNumber>;

    poolToken(overrides?: CallOverrides): Promise<BigNumber>;

    repaymentAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      _staker: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    staked(overrides?: CallOverrides): Promise<BigNumber>;

    takeLoan(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _loanStartEpochs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _loans(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    costOfCapital(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exit(
      exitTo: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fixedCreditAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextPaymentAmount(
      loanAgent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPaymentDeadlineEpoch(
      loanAgent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPenalty(
      loanAgent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _poolToken: PromiseOrValue<string>,
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    loanDurationInEpochs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paydownDebt(
      loanAgent: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paymentInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repaymentAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      _staker: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    staked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takeLoan(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
