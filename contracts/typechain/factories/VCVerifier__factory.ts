/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { VCVerifier, VCVerifierInterface } from "../VCVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_version",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "_VERIFIABLE_CREDENTIAL_TYPE_HASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "issuer",
            type: "address",
          },
          {
            internalType: "address",
            name: "subject",
            type: "address",
          },
          {
            internalType: "string",
            name: "data",
            type: "string",
          },
          {
            internalType: "string",
            name: "issued",
            type: "string",
          },
          {
            internalType: "string",
            name: "validUntil",
            type: "string",
          },
        ],
        internalType: "struct VerifiableCredential",
        name: "vc",
        type: "tuple",
      },
    ],
    name: "digest",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "issuer",
            type: "address",
          },
          {
            internalType: "address",
            name: "subject",
            type: "address",
          },
          {
            internalType: "string",
            name: "data",
            type: "string",
          },
          {
            internalType: "string",
            name: "issued",
            type: "string",
          },
          {
            internalType: "string",
            name: "validUntil",
            type: "string",
          },
        ],
        internalType: "struct VerifiableCredential",
        name: "vc",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "recover",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_router",
        type: "address",
      },
    ],
    name: "setRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101406040523480156200001257600080fd5b5060405162000d4638038062000d468339810160408190526200003591620001f9565b81816200004233620000dc565b815160208084019190912082518383012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c00190528051940193909320919290916080523060c052610120525062000263945050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200015457600080fd5b81516001600160401b03808211156200017157620001716200012c565b604051601f8301601f19908116603f011681019082821181831017156200019c576200019c6200012c565b81604052838152602092508683858801011115620001b957600080fd5b600091505b83821015620001dd5785820183015181830184015290820190620001be565b83821115620001ef5760008385830101525b9695505050505050565b600080604083850312156200020d57600080fd5b82516001600160401b03808211156200022557600080fd5b620002338683870162000142565b935060208501519150808211156200024a57600080fd5b50620002598582860162000142565b9150509250929050565b60805160a05160c05160e0516101005161012051610a93620002b360003960006106a6015260006106f5015260006106d001526000610629015260006106530152600061067d0152610a936000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100db5780638da5cb5b146100e5578063c0d78655146100f6578063f2fde38b1461010957600080fd5b80632b85012b146100825780633446497e1461009d5780636be3cb0e146100c8575b600080fd5b61008a61011c565b6040519081526020015b60405180910390f35b6100b06100ab3660046108e1565b610144565b6040516001600160a01b039091168152602001610094565b61008a6100d6366004610946565b610163565b6100e361017c565b005b6000546001600160a01b03166100b0565b6100e3610104366004610983565b610190565b6100e3610117366004610983565b6101ba565b60405160200161012b906109a5565b6040516020818303038152906040528051906020012081565b600061015a61015286610163565b858585610238565b95945050505050565b600061017661017183610260565b610316565b92915050565b610184610364565b61018e60006103be565b565b610198610364565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6101c2610364565b6001600160a01b03811661022c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610235816103be565b50565b60008060006102498787878761040e565b91509150610256816104d2565b5095945050505050565b6000604051602001610271906109a5565b60405160208183030381529060405280519060200120826000015183602001518460400151805190602001208560600151805190602001208660800151805190602001206040516020016102f9969594939291909586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b604051602081830303815290604052805190602001209050919050565b600061017661032361061c565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000546001600160a01b0316331461018e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610223565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561044557506000905060036104c9565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610499573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166104c2576000600192509250506104c9565b9150600090505b94509492505050565b60008160048111156104e6576104e6610a47565b036104ee5750565b600181600481111561050257610502610a47565b0361054f5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610223565b600281600481111561056357610563610a47565b036105b05760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610223565b60038160048111156105c4576105c4610a47565b036102355760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610223565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561067557507f000000000000000000000000000000000000000000000000000000000000000046145b1561069f57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561077c5761077c610743565b60405290565b80356001600160a01b038116811461079957600080fd5b919050565b600082601f8301126107af57600080fd5b813567ffffffffffffffff808211156107ca576107ca610743565b604051601f8301601f19908116603f011681019082821181831017156107f2576107f2610743565b8160405283815286602085880101111561080b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060a0828403121561083d57600080fd5b610845610759565b905061085082610782565b815261085e60208301610782565b6020820152604082013567ffffffffffffffff8082111561087e57600080fd5b61088a8583860161079e565b604084015260608401359150808211156108a357600080fd5b6108af8583860161079e565b606084015260808401359150808211156108c857600080fd5b506108d58482850161079e565b60808301525092915050565b600080600080608085870312156108f757600080fd5b843567ffffffffffffffff81111561090e57600080fd5b61091a8782880161082b565b945050602085013560ff8116811461093157600080fd5b93969395505050506040820135916060013590565b60006020828403121561095857600080fd5b813567ffffffffffffffff81111561096f57600080fd5b61097b8482850161082b565b949350505050565b60006020828403121561099557600080fd5b61099e82610782565b9392505050565b740accae4d2ccd2c2c4d8ca86e4cac8cadce8d2c2d85605b1b81526e1859191c995cdcc81a5cdcdd595c8b608a1b60158201526f1859191c995cdcc81cdd589a9958dd0b60821b60248201526b1cdd1c9a5b99c819185d184b60a21b60348201526d1cdd1c9a5b99c81a5cdcdd59590b60921b6040820152701cdd1c9a5b99c81d985b1a59155b9d1a5b607a1b604e820152602960f81b605f82015260600190565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220b42100df951d89a8f9eae474390afd3064fffd49267c065b00da4ef89416afc364736f6c634300080f0033";

type VCVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VCVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VCVerifier__factory extends ContractFactory {
  constructor(...args: VCVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _version: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VCVerifier> {
    return super.deploy(
      _name,
      _version,
      overrides || {}
    ) as Promise<VCVerifier>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _version: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _version, overrides || {});
  }
  override attach(address: string): VCVerifier {
    return super.attach(address) as VCVerifier;
  }
  override connect(signer: Signer): VCVerifier__factory {
    return super.connect(signer) as VCVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VCVerifierInterface {
    return new utils.Interface(_abi) as VCVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VCVerifier {
    return new Contract(address, _abi, signerOrProvider) as VCVerifier;
  }
}
