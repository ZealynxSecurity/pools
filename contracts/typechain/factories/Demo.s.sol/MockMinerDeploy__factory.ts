/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockMinerDeploy,
  MockMinerDeployInterface,
} from "../../Demo.s.sol/MockMinerDeploy";

const _abi = [
  {
    inputs: [],
    name: "IS_SCRIPT",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "run",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vm",
    outputs: [
      {
        internalType: "contract Vm",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805460ff1916600117905534801561001d57600080fd5b50610a458061002d6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633a76846314610046578063c04062261461007e578063f8ccbf4714610088575b600080fd5b610061737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100866100a5565b005b6000546100959060ff1681565b6040519015158152602001610075565b60405163350d56bf60e01b815260206004820152601760248201527f4c4f414e5f4147454e545f464143544f52595f414444520000000000000000006044820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf906064016020604051808303816000875af1158015610127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014b9190610477565b90507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c60601b60601c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101b157600080fd5b505af11580156101c5573d6000803e3d6000fd5b5050505060006040516101d79061046a565b604051809103906000f0801580156101f3573d6000803e3d6000fd5b5060405163c88a5e6d60e01b81526001600160a01b0382166004820152678ac7230489e800006024820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c88a5e6d90604401600060405180830381600087803b15801561025a57600080fd5b505af115801561026e573d6000803e3d6000fd5b5050604051630960accd60e31b8152436004820152606460248201819052678ac7230489e8000060448301526001600160a01b0385169350634b056668925001600060405180830381600087803b1580156102c857600080fd5b505af11580156102dc573d6000803e3d6000fd5b50506040516313db266360e31b81526001600160a01b0384811660048301526000935085169150639ed93318906024016020604051808303816000875af115801561032b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034f9190610477565b6040516385eac05f60e01b81526001600160a01b038083166004830152919250908316906385eac05f90602401600060405180830381600087803b15801561039657600080fd5b505af11580156103aa573d6000803e3d6000fd5b50505050806001600160a01b0316634e71e0c86040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156103e957600080fd5b505af11580156103fd573d6000803e3d6000fd5b505060408051633b756e9b60e11b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d93506376eadd369250600480830192600092919082900301818387803b15801561044d57600080fd5b505af1158015610461573d6000803e3d6000fd5b50505050505050565b610568806104a883390190565b60006020828403121561048957600080fd5b81516001600160a01b03811681146104a057600080fd5b939250505056fe6080604052600080546001600160a01b03191633179055610543806100256000396000f3fe6080604052600436106100a05760003560e01c806385eac05f1161006457806385eac05f1461015a578063881ed6db1461017a5780638a1fcd6014610190578063b387ef92146101a6578063c18d85c6146101c6578063da76d5cd146101e657600080fd5b8063414689ff146100ac5780634b056668146100d557806369f3331d146100f75780636c6c7e051461012f5780637943210e1461014457600080fd5b366100a757005b600080fd5b3480156100b857600080fd5b506100c260045481565b6040519081526020015b60405180910390f35b3480156100e157600080fd5b506100f56100f03660046103f0565b610206565b005b34801561010357600080fd5b50600154610117906001600160a01b031681565b6040516001600160a01b0390911681526020016100cc565b34801561013b57600080fd5b506100c261023a565b34801561015057600080fd5b506100c260055481565b34801561016657600080fd5b506100f561017536600461041c565b6102a6565b34801561018657600080fd5b506100c260025481565b34801561019c57600080fd5b506100c260035481565b3480156101b257600080fd5b50600054610117906001600160a01b031681565b3480156101d257600080fd5b506100f56101e136600461044c565b61032b565b3480156101f257600080fd5b506100c261020136600461046e565b61035f565b6000546001600160a01b0316331461021d57600080fd5b47600454111561022c57600080fd5b600292909255600355600455565b6000806002544361024b919061049d565b9050600354811061025e57600091505090565b6000811161026e57505060045490565b60008160035461027e919061049d565b905047600061028d83836104b4565b90506003548161029d91906104d3565b94505050505090565b6000546001600160a01b031633036102d657600180546001600160a01b0319166001600160a01b03831617905550565b6001546001600160a01b0316331480156102fd57506001546001600160a01b038281169116145b156103285760018054600080546001600160a01b03199081166001600160a01b038416179091551690555b50565b816005600082825461033d91906104f5565b925050819055508060056000828254610356919061049d565b90915550505050565b600080546001600160a01b0316331461037757600080fd5b47600061038261023a565b61038c908361049d565b90508084111561039b57600080fd5b836000036103ab578092506103af565b8392505b600080546040516001600160a01b039091169185156108fc02918691818181858888f193505050501580156103e8573d6000803e3d6000fd5b505050919050565b60008060006060848603121561040557600080fd5b505081359360208301359350604090920135919050565b60006020828403121561042e57600080fd5b81356001600160a01b038116811461044557600080fd5b9392505050565b6000806040838503121561045f57600080fd5b50508035926020909101359150565b60006020828403121561048057600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156104af576104af610487565b500390565b60008160001904831182151516156104ce576104ce610487565b500290565b6000826104f057634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561050857610508610487565b50019056fea26469706673582212202f24192f20ee55342431eff106d29b956084615dd1fa35c3c67e11a2758432cd64736f6c634300080f0033a2646970667358221220109ad7657d12d0a72d82834e1920ac49a59d8b2f9858ceb4a067ccf32598863664736f6c634300080f0033";

type MockMinerDeployConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockMinerDeployConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockMinerDeploy__factory extends ContractFactory {
  constructor(...args: MockMinerDeployConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockMinerDeploy> {
    return super.deploy(overrides || {}) as Promise<MockMinerDeploy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockMinerDeploy {
    return super.attach(address) as MockMinerDeploy;
  }
  override connect(signer: Signer): MockMinerDeploy__factory {
    return super.connect(signer) as MockMinerDeploy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockMinerDeployInterface {
    return new utils.Interface(_abi) as MockMinerDeployInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockMinerDeploy {
    return new Contract(address, _abi, signerOrProvider) as MockMinerDeploy;
  }
}
