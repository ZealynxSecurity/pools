/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MockMinerInterface extends utils.Interface {
  functions: {
    "amountLocked()": FunctionFragment;
    "applyRewards(uint256,uint256)": FunctionFragment;
    "changeOwnerAddress(address)": FunctionFragment;
    "currentOwner()": FunctionFragment;
    "lockBalance(uint256,uint256,uint256)": FunctionFragment;
    "lockStart()": FunctionFragment;
    "nextOwner()": FunctionFragment;
    "pledgedAmount()": FunctionFragment;
    "unlockAmount()": FunctionFragment;
    "unlockDuration()": FunctionFragment;
    "withdrawBalance(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "amountLocked"
      | "applyRewards"
      | "changeOwnerAddress"
      | "currentOwner"
      | "lockBalance"
      | "lockStart"
      | "nextOwner"
      | "pledgedAmount"
      | "unlockAmount"
      | "unlockDuration"
      | "withdrawBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "amountLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyRewards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwnerAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockBalance",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "lockStart", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pledgedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "amountLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwnerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockStart", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pledgedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockMiner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockMinerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amountLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    applyRewards(
      reward: PromiseOrValue<BigNumberish>,
      penalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeOwnerAddress(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentOwner(overrides?: CallOverrides): Promise<[string]>;

    lockBalance(
      _lockStart: PromiseOrValue<BigNumberish>,
      _unlockDuration: PromiseOrValue<BigNumberish>,
      _unlockAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lockStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextOwner(overrides?: CallOverrides): Promise<[string]>;

    pledgedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlockAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawBalance(
      amountRequested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  amountLocked(overrides?: CallOverrides): Promise<BigNumber>;

  applyRewards(
    reward: PromiseOrValue<BigNumberish>,
    penalty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeOwnerAddress(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentOwner(overrides?: CallOverrides): Promise<string>;

  lockBalance(
    _lockStart: PromiseOrValue<BigNumberish>,
    _unlockDuration: PromiseOrValue<BigNumberish>,
    _unlockAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lockStart(overrides?: CallOverrides): Promise<BigNumber>;

  nextOwner(overrides?: CallOverrides): Promise<string>;

  pledgedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  unlockAmount(overrides?: CallOverrides): Promise<BigNumber>;

  unlockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawBalance(
    amountRequested: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    amountLocked(overrides?: CallOverrides): Promise<BigNumber>;

    applyRewards(
      reward: PromiseOrValue<BigNumberish>,
      penalty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOwnerAddress(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentOwner(overrides?: CallOverrides): Promise<string>;

    lockBalance(
      _lockStart: PromiseOrValue<BigNumberish>,
      _unlockDuration: PromiseOrValue<BigNumberish>,
      _unlockAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lockStart(overrides?: CallOverrides): Promise<BigNumber>;

    nextOwner(overrides?: CallOverrides): Promise<string>;

    pledgedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    unlockAmount(overrides?: CallOverrides): Promise<BigNumber>;

    unlockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawBalance(
      amountRequested: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    amountLocked(overrides?: CallOverrides): Promise<BigNumber>;

    applyRewards(
      reward: PromiseOrValue<BigNumberish>,
      penalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeOwnerAddress(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentOwner(overrides?: CallOverrides): Promise<BigNumber>;

    lockBalance(
      _lockStart: PromiseOrValue<BigNumberish>,
      _unlockDuration: PromiseOrValue<BigNumberish>,
      _unlockAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lockStart(overrides?: CallOverrides): Promise<BigNumber>;

    nextOwner(overrides?: CallOverrides): Promise<BigNumber>;

    pledgedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    unlockAmount(overrides?: CallOverrides): Promise<BigNumber>;

    unlockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawBalance(
      amountRequested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    amountLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applyRewards(
      reward: PromiseOrValue<BigNumberish>,
      penalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeOwnerAddress(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockBalance(
      _lockStart: PromiseOrValue<BigNumberish>,
      _unlockDuration: PromiseOrValue<BigNumberish>,
      _unlockAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lockStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pledgedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlockAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawBalance(
      amountRequested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
